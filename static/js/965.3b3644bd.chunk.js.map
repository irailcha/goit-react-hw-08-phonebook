{"version":3,"file":"static/js/965.3b3644bd.chunk.js","mappings":"kRAKaA,EAAaC,EAAAA,EAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oEAMxBC,GAAcH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAaK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,qK,kDCT3BI,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAE/CC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAAQ,EAChDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAC5CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACT,EAJyB,SAAAC,GAAK,OAAIA,EAAMS,MAAO,IAKhD,SAACR,EAAUQ,GACT,OAAOR,EAASQ,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,SCFIE,EAAaC,EAAAA,KAAaC,MAAM,CACpCL,KAAMI,EAAAA,KAAaE,WAAWC,MAAM,QACpCC,OAAQJ,EAAAA,KAAaE,WAAWC,MAAM,YAyDxC,EAtDoB,WAClB,IAAME,GAAWC,EAAAA,EAAAA,MACXpB,GAAWqB,EAAAA,EAAAA,IAAYvB,GAa7B,OACEwB,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,cAAe,CAAEd,KAAM,GAAIQ,OAAQ,IAAMO,iBAAkBZ,EAAYa,SAXvD,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UAC5BnB,EAAgBiB,EAAhBjB,KAAMQ,EAAUS,EAAVT,OACb,GAAIlB,EAAS8B,MAAK,SAAArB,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBgB,EAAOjB,KAAKC,eAAiBF,EAAQS,SAAWS,EAAOT,MAAM,IACvH,OAAOa,MAAM,GAADC,OAAIL,EAAOjB,KAAI,QAAAsB,OAAOL,EAAOT,OAAM,sBAEjDC,GAASc,EAAAA,EAAAA,IAAW,CAACvB,KAAAA,EAAMQ,OAAAA,KAC3BW,GACF,EAI6GK,SACxG,SAAAC,GAAA,IAAGC,EAAYD,EAAZC,aAAY,OACdC,EAAAA,EAAAA,MAAC9C,EAAU,CAAC+C,aAAa,MAAMZ,SAAUU,EAAaF,SAAA,EACpDZ,EAAAA,EAAAA,KAAA,SAAOiB,QAAQ,OAAML,SAAC,YACtBZ,EAAAA,EAAAA,KAAC3B,EAAW,CACV6C,KAAK,OACL9B,KAAK,OACL+B,QAAQ,2HACRC,MAAM,yIACN1B,UAAQ,KAEVM,EAAAA,EAAAA,KAAA,SAAOiB,QAAQ,SAAQL,SAAC,cACxBZ,EAAAA,EAAAA,KAAC3B,EAAW,CACV6C,KAAK,MACL9B,KAAK,SACL+B,QAAQ,qGACRC,MAAM,+FACN1B,UAAQ,KAILM,EAAAA,EAAAA,KAACqB,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,UAAWd,UACtEZ,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CACLT,KAAK,SAELU,QAAQ,YACRJ,GAAI,CAAEK,GAAI,EAAGC,GAAI,GAAIlB,SACtB,oBAKM,GAIrB,E,qECAA,EAvDe,SAAHN,GAAkB,IAAZlB,EAAIkB,EAAJlB,KACVS,GAAWC,EAAAA,EAAAA,MACXpB,GAAWqB,EAAAA,EAAAA,IAAYvB,GAEvBuD,EAAuB,SAACC,GAC5BnC,GAASoC,EAAAA,EAAAA,GAAUD,GACrB,EAMME,GAAeC,EAAAA,EAAAA,KAIrB,OAFqBzD,EAAS0D,OAAS,IAInCpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAa,CAACC,MAAOJ,EAAatB,UACjCG,EAAAA,EAAAA,MAACwB,EAAAA,EAAS,CAACC,UAAU,OAAOC,SAAS,KAAI7B,SAAA,EACvCZ,EAAAA,EAAAA,KAAC0C,EAAAA,GAAW,KACZ3B,EAAAA,EAAAA,MAAC4B,EAAAA,EAAG,CACFnB,GAAI,CACFoB,UAAW,EACXnB,QAAS,OACToB,WAAY,SACZnB,eAAgB,gBAChBoB,IAAK,QAELlC,SAAA,EAEFZ,EAAAA,EAAAA,KAAC+C,EAAAA,EAAS,CACRrD,UAAQ,EACRsD,WAAS,EACT9B,KAAK,OACL9B,KAAK,eACL6D,MAAO7D,EACP8D,SAAU,SAAAC,GAAG,OAAIpB,EAAqBoB,EAAIC,OAAOH,MAAM,EACvDI,YAAY,YAEdrD,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CACLT,KAAK,SACLU,QAAQ,YACRJ,GAAI,CAAEK,GAAI,GACVyB,QApCQ,WAClBvB,EAAqB,GACvB,EAkCiCnB,SACtB,iBAQb,E,4DCtBA,EArCoB,WAClB,IAAMf,GAAWC,EAAAA,EAAAA,MACXyD,GAAkBxD,EAAAA,EAAAA,IAAYf,GAMpC,OACEgB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAG,CAAA/B,SACD2C,EAAgBC,KAAI,SAACrE,GAAO,OAC3Ba,EAAAA,EAAAA,KAACyD,EAAAA,EAAc,CAACjB,UAAWkB,EAAAA,EAAM9C,UAC/BZ,EAAAA,EAAAA,KAAC2D,EAAAA,EAAK,CAAA/C,UACJZ,EAAAA,EAAAA,KAAC4D,EAAAA,EAAS,CAAAhD,UACRG,EAAAA,EAAAA,MAAC8C,EAAAA,EAAQ,CAAAjD,SAAA,EACPZ,EAAAA,EAAAA,KAAC8D,EAAAA,EAAS,CAACC,MAAO,CAAEC,MAAO,OAAQpD,SAAEzB,EAAQC,QAC7CY,EAAAA,EAAAA,KAAC8D,EAAAA,EAAS,CAACC,MAAO,CAAEC,MAAO,OAAQpD,SAAEzB,EAAQS,UAC7CI,EAAAA,EAAAA,KAAC8D,EAAAA,EAAS,CAAAlD,UACRZ,EAAAA,EAAAA,KAAC2C,EAAAA,EAAG,CAAClB,QAAQ,OAAOC,eAAe,WAAUd,UAC3CZ,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CACLC,QAAQ,YACRqC,MAAM,QACNX,QAAS,kBAlBCY,EAkB0B/E,EAAQgF,QAjB9DtE,GAASuE,EAAAA,EAAAA,IAAcF,IADI,IAACA,CAkBqC,EAACtD,SACjD,iBATQzB,EAAQgF,SAHUhF,EAAQgF,GAoB9B,KAIzB,ECrCaE,EAAanG,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0CAKvBkG,EAAapG,EAAAA,EAAAA,GAASK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,qFAOtBmG,EAAiBrG,EAAAA,EAAAA,GAASsG,IAAAA,GAAApG,EAAAA,EAAAA,GAAA,0JAW1BqG,EAAevG,EAAAA,EAAAA,EAAQwG,IAAAA,GAAAtG,EAAAA,EAAAA,GAAA,iECbvBuG,EAAW,WAEtB,IAAM9F,GAAUkB,EAAAA,EAAAA,IAAYnB,GACtBG,GAAQgB,EAAAA,EAAAA,IAAYjB,GACpBJ,GAAWqB,EAAAA,EAAAA,IAAYvB,GACvBqB,GAAWC,EAAAA,EAAAA,MASjB,OAPA8E,EAAAA,EAAAA,YAAU,WAER/E,GAASgF,EAAAA,EAAAA,MACX,GAAG,CAAChF,KAKFkB,EAAAA,EAAAA,MAACsD,EAAY,CAAAzD,SAAA,EACXZ,EAAAA,EAAAA,KAACsE,EAAU,CAAA1D,SAAC,iBACZZ,EAAAA,EAAAA,KAAC8E,EAAW,IACXjG,IAAWmB,EAAAA,EAAAA,KAACyE,EAAY,CAAA7D,SAAC,eACrB7B,IAASiB,EAAAA,EAAAA,KAACyE,EAAY,CAAA7D,SAAE7B,KAE7BiB,EAAAA,EAAAA,KAACsE,EAAU,CAAA1D,SAAC,gBACZG,EAAAA,EAAAA,MAACwD,EAAgB,CAAA3D,SAAA,EACfZ,EAAAA,EAAAA,KAAC+E,EAAM,IACc,IAApBrG,EAAS0D,SACNpC,EAAAA,EAAAA,KAACyE,EAAY,CAAA7D,SAAC,gCAElBZ,EAAAA,EAAAA,KAACgF,EAAW,SAKpB,EAGA,G","sources":["components/ContactForm/ContactFormStyle.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts/ContactsStyle.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\n\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 10px;\n  margin: 6px 0;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  \n`;\n\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter; \nexport const selectLoading = state => state.contacts.loading;\nexport const selectError = state => state.contacts.error;\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StyledForm, StyledField} from './ContactFormStyle';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport { addContact } from '../../redux/contacts/operations';\nimport {selectContacts} from '../../redux/contacts/selectors';\n\nconst userSchema = yup.object().shape({\n  name: yup.string().required().label(\"name\"),\n  number: yup.string().required().label('number'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n\n  const addContactHandler = (values, { resetForm }) => {\n    const {name, number} = values;\n    if (contacts.find(contact => contact.name.toLowerCase() === values.name.toLowerCase() || contact.number === values.number)) {\n      return alert(`${values.name} or ${values.number} is already exist`)\n    }\n    dispatch(addContact({name, number}));\n    resetForm();\n  }; \n\n\n  return (\n    <Formik initialValues={{ name: '', number: '' }} validationSchema={userSchema} onSubmit={addContactHandler}>\n      {({ handleSubmit }) => (\n        <StyledForm autoComplete='off' onSubmit={handleSubmit}>\n          <label htmlFor='name'> Name </label>\n          <StyledField\n            type='text'\n            name='name'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <label htmlFor='number'> Number </label>\n          <StyledField\n            type='tel'\n            name='number'\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n\n          \n               <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n              <Button\n                type=\"submit\"\n                \n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Add contact\n              </Button>\n              </Grid>\n\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n\n\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\n\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nconst Filter = ({ name }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const changeContactHandler = (newFilter) => {\n    dispatch(setFilter(newFilter));\n  };\n\n  const handleReset = () => {\n    changeContactHandler('');\n  };\n  \n  const defaultTheme = createTheme();\n  \n  const renderFilter = contacts.length > 0;\n\n  return (\n    renderFilter && (\n      <ThemeProvider theme={defaultTheme}>\n        <Container component=\"main\" maxWidth=\"md\">\n          <CssBaseline />\n          <Box\n            sx={{\n              marginTop: 0,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              gap: '15px',\n\n            }}\n          >\n            <TextField\n              required\n              fullWidth\n              type='text'\n              name='Find contact'\n              value={name}\n              onChange={evt => changeContactHandler(evt.target.value)}\n              placeholder='Filter'\n            />\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              sx={{ mt: 0 }}\n              onClick={handleReset}\n            >\n              Reset\n            </Button>\n          </Box>\n        </Container>\n      </ThemeProvider>\n    )\n  );\n};\n\nexport default Filter;\n\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, Button, Table, TableBody, TableCell, TableContainer, TableRow, Paper } from '@mui/material';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const deleteContactHandler = (contactId) => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <Box>\n      {visibleContacts.map((contact) => (\n        <TableContainer component={Paper} key={contact.id}>\n          <Table>\n            <TableBody>\n              <TableRow key={contact.id}>\n                <TableCell style={{ width: '40%' }}>{contact.name}</TableCell>\n                <TableCell style={{ width: '40%' }}>{contact.number}</TableCell>\n                <TableCell>\n                  <Box display=\"flex\" justifyContent=\"flex-end\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"error\"\n                      onClick={() => deleteContactHandler(contact.id)}\n                    >\n                      Delete\n                    </Button>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      ))}\n    </Box>\n  );\n};\n\nexport default ContactList;\n\n\n\n\n","import styled from '@emotion/styled';\n\n\n\nexport const SectionStyle=styled.div `\nwidth: 500px;\nmargin: auto;\n\n`\nexport const TitleStyle = styled.h2`\nfont-size: 30px;\nmargin:0 auto;\ntext-align: center;\npadding-top: 15px;\n`\n\nexport const ContactListStyle=styled.ul`\npadding: 24px;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\nfont-style: italic;\nwidth: 380px;\nmargin: 0 auto;\npadding-top: 20px;\n\n`\nexport const MessageStyle = styled.p`\nfont-size: 18px;\nmargin:0 auto;\ntext-align: center;\n`\n\n","import React from 'react';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { SectionStyle, TitleStyle, ContactListStyle, MessageStyle } from './ContactsStyle';\nimport {\n  selectLoading,\n  selectError,\n  selectContacts\n} from '../../redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { useEffect } from 'react';\n\nexport const Contacts = () => {\n\n  const loading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    \n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n\n  return (\n    <SectionStyle>\n      <TitleStyle> Phonebook </TitleStyle>\n      <ContactForm/>\n      {loading && <MessageStyle>Loading...</MessageStyle>}\n          {error && <MessageStyle>{error}</MessageStyle>}\n\n      <TitleStyle> Contacts </TitleStyle>\n      <ContactListStyle>\n        <Filter />\n        {contacts.length === 0 && (\n            <MessageStyle>There are no any contacts </MessageStyle>\n          )}\n        <ContactList />\n      </ContactListStyle>\n      \n    </SectionStyle>\n  );\n};\n\n\nexport default Contacts;\n\n\n\n"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","StyledField","Field","_templateObject2","selectContacts","state","contacts","items","selectLoading","loading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","userSchema","yup","shape","required","label","number","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","find","alert","concat","addContact","children","_ref2","handleSubmit","_jsxs","autoComplete","htmlFor","type","pattern","title","Grid","item","xs","sx","display","justifyContent","Button","variant","mt","mb","changeContactHandler","newFilter","setFilter","defaultTheme","createTheme","length","ThemeProvider","theme","Container","component","maxWidth","CssBaseline","Box","marginTop","alignItems","gap","TextField","fullWidth","value","onChange","evt","target","placeholder","onClick","visibleContacts","map","TableContainer","Paper","Table","TableBody","TableRow","TableCell","style","width","color","contactId","id","deleteContact","SectionStyle","TitleStyle","ContactListStyle","_templateObject3","MessageStyle","_templateObject4","Contacts","useEffect","fetchContacts","ContactForm","Filter","ContactList"],"sourceRoot":""}