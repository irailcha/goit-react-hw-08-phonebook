{"version":3,"file":"static/js/799.4f70a3c4.chunk.js","mappings":"0RAKaA,EAAaC,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qEAMxBC,GAAcH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAaK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,6KAW3BI,EAAeN,EAAAA,GAAAA,OAAaO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,mf,8BCpB5BM,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAE/CC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAAQ,EAChDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAC5CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACT,EAJyB,SAAAC,GAAK,OAAIA,EAAMS,MAAO,IAKhD,SAACR,EAAUQ,GACT,OAAOR,EAASQ,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,SCFIE,EAAaC,EAAAA,KAAaC,MAAM,CACpCL,KAAMI,EAAAA,KAAaE,WAAWC,MAAM,QACpCC,OAAQJ,EAAAA,KAAaE,WAAWC,MAAM,YAgDxC,EA7CoB,WAClB,IAAME,GAAWC,EAAAA,EAAAA,MACXpB,GAAWqB,EAAAA,EAAAA,IAAYvB,GAa7B,OACEwB,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,cAAe,CAAEd,KAAM,GAAIQ,OAAQ,IAAMO,iBAAkBZ,EAAYa,SAXvD,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UAC5BnB,EAAgBiB,EAAhBjB,KAAMQ,EAAUS,EAAVT,OACb,GAAIlB,EAAS8B,MAAK,SAAArB,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBgB,EAAOjB,KAAKC,eAAiBF,EAAQS,SAAWS,EAAOT,MAAM,IACvH,OAAOa,MAAM,GAADC,OAAIL,EAAOjB,KAAI,QAAAsB,OAAOL,EAAOT,OAAM,sBAEjDC,GAASc,EAAAA,EAAAA,IAAW,CAACvB,KAAAA,EAAMwB,MAAMhB,KACjCW,GACF,EAI6GM,SACxG,SAAAC,GAAA,IAAGC,EAAYD,EAAZC,aAAY,OACdC,EAAAA,EAAAA,MAACjD,EAAU,CAACkD,aAAa,MAAMb,SAAUW,EAAaF,SAAA,EACpDb,EAAAA,EAAAA,KAAA,SAAOkB,QAAQ,OAAML,SAAC,YACtBb,EAAAA,EAAAA,KAAC7B,EAAW,CACVgD,KAAK,OACL/B,KAAK,OACLgC,QAAQ,2HACRC,MAAM,yIACN3B,UAAQ,KAEVM,EAAAA,EAAAA,KAAA,SAAOkB,QAAQ,SAAQL,SAAC,cACxBb,EAAAA,EAAAA,KAAC7B,EAAW,CACVgD,KAAK,MACL/B,KAAK,SACLgC,QAAQ,qGACRC,MAAM,+FACN3B,UAAQ,KAIVM,EAAAA,EAAAA,KAAC1B,EAAY,CAAC6C,KAAK,SAAQN,SAAC,oBAEjB,GAIrB,E,0FCmBA,EA7De,SAAHP,GAAkB,IAAZlB,EAAIkB,EAAJlB,KACVS,GAAWC,EAAAA,EAAAA,MACXpB,GAAWqB,EAAAA,EAAAA,IAAYvB,GAEvB8C,EAAuB,SAACC,GAC5B1B,GAAS2B,EAAAA,EAAAA,GAAUD,GACrB,EAKME,GAAeC,EAAAA,EAAAA,KAIrB,OAFsBhD,EAASiD,OAAS,IAIrC3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAa,CAACC,MAAOJ,EAAaZ,UACpCG,EAAAA,EAAAA,MAACc,EAAAA,EAAS,CAACC,UAAU,OAAOC,SAAS,KAAInB,SAAA,EACvCb,EAAAA,EAAAA,KAACiC,EAAAA,GAAW,KACZjC,EAAAA,EAAAA,KAACkC,EAAAA,EAAG,CACFC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UACZ1B,UAIFG,EAAAA,EAAAA,MAACwB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE7B,SAAA,EAC3Bb,EAAAA,EAAAA,KAACwC,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAG/B,UAClBb,EAAAA,EAAAA,KAAC6C,EAAAA,EAAS,CACVnD,UAAQ,EACRoD,WAAS,EACP3B,KAAK,OACL/B,KAAK,eACL2D,MAAO3D,EACP4D,SAAU,SAAAC,GAAG,OAAI3B,EAAqB2B,EAAIC,OAAOH,MAAM,EACvDI,YAAY,cAKhBnD,EAAAA,EAAAA,KAACwC,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIT,GAAI,CAAEE,QAAS,OAAQe,eAAgB,UAAYC,QApCtD,WAClB/B,EAAqB,GACvB,EAkC+FT,UAC7Eb,EAAAA,EAAAA,KAACsD,EAAAA,EAAM,CACLnC,KAAK,SAELoC,QAAQ,YACRpB,GAAI,CAAEqB,GAAI,EAAGC,GAAI,GAAI5C,SACtB,8BAQrB,ECxEa6C,EAAa1F,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8DAOtByF,EAAiB3F,EAAAA,GAAAA,GAASK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,4FAQ1B0F,EAAe5F,EAAAA,GAAAA,OAAaO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,scCWzC,EArBoB,WAElB,IAAM2B,GAAWC,EAAAA,EAAAA,MACX+D,GAAkB9D,EAAAA,EAAAA,IAAYf,GAMpC,OACEgB,EAAAA,EAAAA,KAAC2D,EAAgB,CAAA9C,SACdgD,EAAgBC,KAAI,SAAA3E,GAAO,OAC1B6B,EAAAA,EAAAA,MAAC0C,EAAY,CAAA7C,SAAA,CACV1B,EAAQC,KAAK,MAAID,EAAQyB,OAC1BZ,EAAAA,EAAAA,KAAC4D,EAAc,CAACP,QAAS,kBATHU,EAS8B5E,EAAQ6E,QARlEnE,GAASoE,EAAAA,EAAAA,IAAcF,IADI,IAACA,CASyC,EAAClD,SAAC,aAFhD1B,EAAQ6E,GAGZ,KAIvB,E,SCtBaE,EAAalG,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0CAKvBiG,EAAanG,EAAAA,EAAAA,GAASK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,iFAOtByF,EAAiB3F,EAAAA,EAAAA,GAASO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,0JAW1BkG,EAAepG,EAAAA,EAAAA,EAAQqG,IAAAA,GAAAnG,EAAAA,EAAAA,GAAA,iECbvBoG,EAAW,WAEtB,IAAMzF,GAAUkB,EAAAA,EAAAA,IAAYnB,GACtBG,GAAQgB,EAAAA,EAAAA,IAAYjB,GACpBJ,GAAWqB,EAAAA,EAAAA,IAAYvB,GACvBqB,GAAWC,EAAAA,EAAAA,MASjB,OAPAyE,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAI,iBACZ5E,GAAS6E,EAAAA,EAAAA,MACX,GAAG,CAAC7E,KAKFmB,EAAAA,EAAAA,MAACkD,EAAY,CAAArD,SAAA,EACXb,EAAAA,EAAAA,KAACmE,EAAU,CAAAtD,SAAC,iBACZb,EAAAA,EAAAA,KAAC2E,EAAW,IACX9F,IAAWmB,EAAAA,EAAAA,KAACoE,EAAY,CAAAvD,SAAC,eACrB9B,IAASiB,EAAAA,EAAAA,KAACoE,EAAY,CAAAvD,SAAE9B,KAE7BiB,EAAAA,EAAAA,KAACmE,EAAU,CAAAtD,SAAC,gBACZG,EAAAA,EAAAA,MAAC2C,EAAgB,CAAA9C,SAAA,EACfb,EAAAA,EAAAA,KAAC4E,EAAM,IACc,IAApBlG,EAASiD,SACN3B,EAAAA,EAAAA,KAACoE,EAAY,CAAAvD,SAAC,gCAElBb,EAAAA,EAAAA,KAAC6E,EAAW,SAKpB,EAGA,G","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/Contacts/ContactsStyle.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field } from 'formik';\n\n\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 8px;\n  margin: 6px 0;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  gap:10px;\n`;\n\nexport const SubmitButton = styled.button`\n  font-weight: 500;\n  cursor: pointer;\n  border-style: none;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.15);\n  margin: auto;\n  font-size: 20px;\n  padding: 10px 24px;\n  text-transform: uppercase;\n  \n\n  transition-property: background-color, box-shadow;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: #939495;\n    border: 2px solid #ccc;\n  }\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter; \nexport const selectLoading = state => state.contacts.loading;\nexport const selectError = state => state.contacts.error;\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StyledForm, StyledField, SubmitButton } from './ContactForm.styled';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport { addContact } from '../../redux/contacts/operations';\n\nimport {selectContacts} from '../../redux/contacts/selectors';\n\nconst userSchema = yup.object().shape({\n  name: yup.string().required().label(\"name\"),\n  number: yup.string().required().label(\"number\"),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n\n  const addContactHandler = (values, { resetForm }) => {\n    const {name, number} = values;\n    if (contacts.find(contact => contact.name.toLowerCase() === values.name.toLowerCase() || contact.number === values.number)) {\n      return alert(`${values.name} or ${values.number} is already exist`)\n    }\n    dispatch(addContact({name, phone:number}));\n    resetForm();\n  }; \n\n\n  return (\n    <Formik initialValues={{ name: '', number: '' }} validationSchema={userSchema} onSubmit={addContactHandler}>\n      {({ handleSubmit }) => (\n        <StyledForm autoComplete='off' onSubmit={handleSubmit}>\n          <label htmlFor='name'> Name </label>\n          <StyledField\n            type='text'\n            name='name'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <label htmlFor='number'> Number </label>\n          <StyledField\n            type='tel'\n            name='number'\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n\n          \n          <SubmitButton type='submit'> Add contact </SubmitButton>\n\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\n// import './Filter.styled';\n// import { FilterStyle } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport {selectContacts} from '../../redux/contacts/selectors';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\n\n\nconst Filter = ({ name }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const changeContactHandler = (newFilter) => {\n    dispatch(setFilter(newFilter));\n  };\n\n  const handleReset = () => {\n    changeContactHandler('');\n  };\n  const defaultTheme = createTheme();\n  \n  const  renderFilter = contacts.length > 0;\n\n  return (\n    renderFilter &&\n    (<ThemeProvider theme={defaultTheme}>\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n\n      \n        <Grid container spacing={2}>\n        <Grid item xs={12}>\n        <TextField\n        required\n        fullWidth\n          type='text'\n          name='Find contact'\n          value={name}\n          onChange={evt => changeContactHandler(evt.target.value)}\n          placeholder='Filter'\n        />\n        </Grid>\n      \n    \n      <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center' }} onClick={handleReset}>\n                    <Button\n                      type=\"submit\"\n                      \n                      variant=\"contained\"\n                      sx={{ mt: 3, mb: 2 }}\n                    > Reset filter </Button>\n                  </Grid>\n      </Grid>\n\n    </Box>\n      </Container>\n    </ThemeProvider>)\n  );\n};\n\n\nexport default Filter;\n","import styled from 'styled-components'\n\nexport const ContactStyle=styled.li`\ndisplay: flex;\ngap: 15px;\nalign-items: center;\n\n`\n\nexport const ContactListStyle=styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 15px;\npadding:0;\nwidth: 360px;\n\n`\nexport const BtnDeleteStyle=styled.button`\nfont-weight: 400;\ncursor: pointer;\nborder-style: none;\nborder: 2px solid #ccc;\nborder-radius: 5px;\nbox-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.15);\nmargin: auto;\nfont-size: 15px;\npadding: 5px 10px;\nmargin-right: 0;\n\n\n\ntransition-property: background-color, box-shadow;\ntransition-duration: 250ms;\ntransition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover {\n  background-color: #939495;\n  border: 2px solid #ccc;\n}\n`;\n","import React from 'react';\nimport './ContactList.styled';\nimport { ContactStyle, ContactListStyle, BtnDeleteStyle } from './ContactList.styled';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nconst ContactList = () => {\n  \n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const deleteContactHandler = (contactId) => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ContactListStyle>\n      {visibleContacts.map(contact => (\n        <ContactStyle key={contact.id}>\n          {contact.name} : {contact.phone}\n          <BtnDeleteStyle onClick={() => deleteContactHandler(contact.id)}>Delete</BtnDeleteStyle>\n        </ContactStyle>\n      ))}\n    </ContactListStyle>\n  );\n}\n\nexport default ContactList;","import styled from '@emotion/styled';\n\n\n\nexport const SectionStyle=styled.div `\nwidth: 500px;\nmargin: auto;\n\n`\nexport const TitleStyle = styled.h2`\nfont-size: 30px;\nmargin:0 auto;\ntext-align: center;\npadding: 10px;\n`\n\nexport const ContactListStyle=styled.ul`\npadding: 24px;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\nfont-style: italic;\nwidth: 380px;\nmargin: 0 auto;\npadding-top: 20px;\n\n`\nexport const MessageStyle = styled.p`\nfont-size: 18px;\nmargin:0 auto;\ntext-align: center;\n`\n\n","import React from 'react';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { SectionStyle, TitleStyle, ContactListStyle, MessageStyle } from './ContactsStyle';\nimport {\n  selectLoading,\n  selectError,\n  selectContacts\n} from '../../redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { useEffect } from 'react';\n\nexport const Contacts = () => {\n\n  const loading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log('fetchContacts')\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n\n  return (\n    <SectionStyle>\n      <TitleStyle> Phonebook </TitleStyle>\n      <ContactForm/>\n      {loading && <MessageStyle>Loading...</MessageStyle>}\n          {error && <MessageStyle>{error}</MessageStyle>}\n\n      <TitleStyle> Contacts </TitleStyle>\n      <ContactListStyle>\n        <Filter />\n        {contacts.length === 0 && (\n            <MessageStyle>There are no any contacts </MessageStyle>\n          )}\n        <ContactList />\n      </ContactListStyle>\n      \n    </SectionStyle>\n  );\n};\n\n\nexport default Contacts;\n\n\n\n"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","StyledField","Field","_templateObject2","SubmitButton","_templateObject3","selectContacts","state","contacts","items","selectLoading","loading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","userSchema","yup","shape","required","label","number","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","find","alert","concat","addContact","phone","children","_ref2","handleSubmit","_jsxs","autoComplete","htmlFor","type","pattern","title","changeContactHandler","newFilter","setFilter","defaultTheme","createTheme","length","ThemeProvider","theme","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Grid","container","spacing","item","xs","TextField","fullWidth","value","onChange","evt","target","placeholder","justifyContent","onClick","Button","variant","mt","mb","ContactStyle","ContactListStyle","BtnDeleteStyle","visibleContacts","map","contactId","id","deleteContact","SectionStyle","TitleStyle","MessageStyle","_templateObject4","Contacts","useEffect","console","log","fetchContacts","ContactForm","Filter","ContactList"],"sourceRoot":""}