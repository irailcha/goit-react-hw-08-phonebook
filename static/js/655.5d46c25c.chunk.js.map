{"version":3,"file":"static/js/655.5d46c25c.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/Contacts/ContactsStyle.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter; \nexport const selectLoading = state => state.contacts.loading;\nexport const selectError = state => state.contacts.error;\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport { addContact } from '../../redux/contacts/operations';\n\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport Button from '@mui/material/Button';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\n\nconst userSchema = yup.object().shape({\n  name: yup.string().required().label(\"name\"),\n  number: yup.string().required().label('number'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const addContactHandler = (values, { resetForm }) => {\n    const { name, number } = values;\n    if (contacts.find(contact => contact.name.toLowerCase() === values.name.toLowerCase() || contact.number === values.number)) {\n      return alert(`${values.name} or ${values.number} is already exist`)\n    }\n    dispatch(addContact({ name, phone: number }));\n    resetForm();\n  }; \n\n  const defaultTheme = createTheme();\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Formik initialValues={{ name: '', number: '' }} validationSchema={userSchema} onSubmit={addContactHandler}>\n            {({ handleSubmit }) => (\n              <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }} autoComplete='off'>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <label htmlFor='name'> Name </label>\n                    <TextField\n                      required\n                      fullWidth\n                      type='text'\n                      name='name'\n                      pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                      \n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <label htmlFor='number'> Number </label>\n                    <TextField\n                      required\n                      fullWidth\n                      type='tel'\n                      name='number'\n                      pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                      title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                      \n                    />\n                  </Grid>\n                  <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n                    <Button\n                      type=\"submit\"\n                      \n                      variant=\"contained\"\n                      sx={{ mt: 3, mb: 2 }}\n                    > Add contact </Button>\n                  </Grid>\n                </Grid>\n              </Box>\n            )}\n          </Formik>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default ContactForm;\n\n\n","import React from 'react';\n// import './Filter.styled';\n// import { FilterStyle } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterSlice';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\n\nconst Filter = ({ name }) => {\n  const dispatch = useDispatch();\n\n  const changeContactHandler = (newFilter) => {\n    dispatch(setFilter(newFilter));\n  };\n\n  const handleReset = () => {\n    changeContactHandler('');\n  };\n  const defaultTheme = createTheme();\n  \n  return (\n    <ThemeProvider theme={defaultTheme}>\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n\n      \n        <Grid container spacing={2}>\n        <Grid item xs={12}>\n        <TextField\n        required\n        fullWidth\n          type='text'\n          name='Find contact'\n          value={name}\n          onChange={evt => changeContactHandler(evt.target.value)}\n          placeholder='Filter'\n        />\n        </Grid>\n      \n    \n      <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center' }} onClick={handleReset}>\n                    <Button\n                      type=\"submit\"\n                      \n                      variant=\"contained\"\n                      sx={{ mt: 3, mb: 2 }}\n                    > Reset filter </Button>\n                  </Grid>\n      </Grid>\n\n    </Box>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\n\nexport default Filter;\n","import styled from 'styled-components'\n\nexport const ContactStyle=styled.li`\ndisplay: flex;\ngap: 15px;\nalign-items: center;\n\n`\n\nexport const ContactListStyle=styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 15px;\npadding:0;\nwidth: 360px;\n\n`\nexport const BtnDeleteStyle=styled.button`\nfont-weight: 400;\ncursor: pointer;\nborder-style: none;\nborder: 2px solid #ccc;\nborder-radius: 5px;\nbox-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.15);\nmargin: auto;\nfont-size: 15px;\npadding: 5px 10px;\nmargin-right: 0;\n\n\n\ntransition-property: background-color, box-shadow;\ntransition-duration: 250ms;\ntransition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover {\n  background-color: #939495;\n  border: 2px solid #ccc;\n}\n`;\n","import React from 'react';\nimport './ContactList.styled';\nimport { ContactStyle, ContactListStyle, BtnDeleteStyle } from './ContactList.styled';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const deleteContactHandler = (contactId) => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ContactListStyle>\n      {visibleContacts.map(contact => (\n        <ContactStyle key={contact.id}>\n          {contact.name} : {contact.phone}\n          <BtnDeleteStyle onClick={() => deleteContactHandler(contact.id)}>Delete</BtnDeleteStyle>\n        </ContactStyle>\n      ))}\n    </ContactListStyle>\n  );\n}\n\nexport default ContactList;","import styled from '@emotion/styled';\n\n\n\nexport const SectionStyle=styled.div `\nwidth: 500px;\nmargin: auto;\n\n`\nexport const TitleStyle = styled.h2`\nfont-size: 30px;\nmargin:0 auto;\ntext-align: center;\n`\n\nexport const ContactListStyle=styled.ul`\npadding: 24px;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\nfont-style: italic;\nwidth: 380px;\nmargin: 0 auto;\npadding-top: 20px;\n\n`\n","import React from 'react';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\n\nimport { SectionStyle, TitleStyle, ContactListStyle } from './ContactsStyle';\nimport {\n  selectLoading,\n  selectError,\n  selectContacts\n} from '../../redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { useEffect } from 'react';\n\nexport const Contacts = () => {\n  const loading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n\n  return (\n    <SectionStyle>\n      <TitleStyle> Phonebook </TitleStyle>\n      <ContactForm/>\n      {loading && <p>Loading...</p>}\n          {error && <p>{error}</p>}\n\n      <TitleStyle> Contacts </TitleStyle>\n      <ContactListStyle>\n        <Filter />\n        {contacts.length === 0 && (\n            <p>There are no any contacts </p>\n          )}\n        <ContactList />\n      </ContactListStyle>\n      \n    </SectionStyle>\n  );\n};\n\n\nexport default Contacts;\n\n\n\n"],"names":["selectContacts","state","contacts","items","selectLoading","loading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","userSchema","yup","shape","required","label","number","dispatch","useDispatch","useSelector","defaultTheme","createTheme","_jsx","ThemeProvider","theme","children","_jsxs","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","find","alert","concat","addContact","phone","_ref2","handleSubmit","noValidate","mt","autoComplete","Grid","container","spacing","item","xs","htmlFor","TextField","fullWidth","type","pattern","title","justifyContent","Button","variant","mb","changeContactHandler","newFilter","setFilter","value","onChange","evt","target","placeholder","onClick","ContactStyle","styled","_templateObject","_taggedTemplateLiteral","ContactListStyle","_templateObject2","BtnDeleteStyle","_templateObject3","visibleContacts","map","contactId","id","deleteContact","SectionStyle","TitleStyle","Contacts","useEffect","fetchContacts","ContactForm","Filter","length","ContactList"],"sourceRoot":""}